{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SamSung\\\\Desktop\\\\\\uC5D8\\uB9AC\\uC2A4\\uD2B8\\uB799\\\\1\\uCC28\\uD504\\uB85C\\uC81D\\uD2B8\\\\testgit\\\\front\\\\src\\\\pages\\\\Awards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, Button, Row, Col } from \"react-bootstrap\";\nimport * as Api from \"../api\";\nimport { Award, AwardAddForm } from \"../components/features/award\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Awards(_ref) {\n  _s();\n\n  let {\n    portfolioOwnerId,\n    isEditable\n  } = _ref;\n  //useState로 awards 상태를 생성함.\n  const [awards, setAwards] = useState([]); //useState로 isAdding 상태를 생성함.\n\n  const [isAdding, setIsAdding] = useState(false);\n  useEffect(() => {\n    // \"awardlist/유저id\"로 GET 요청하고, response의 data로 awards를 세팅함.\n    Api.get(\"awardlist\", portfolioOwnerId).then(res => setAwards(res.data));\n  }, [portfolioOwnerId]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"\\uC218\\uC0C1\\uC774\\uB825\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), awards.map(award => /*#__PURE__*/_jsxDEV(Award, {\n        award: award,\n        setAwards: setAwards,\n        isEditable: isEditable\n      }, award.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)), isEditable && /*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-3 text-center mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          sm: {\n            span: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setIsAdding(true),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this), isAdding && /*#__PURE__*/_jsxDEV(AwardAddForm, {\n        portfolioOwnerId: portfolioOwnerId,\n        setAwards: setAwards,\n        setIsAdding: setIsAdding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Awards, \"wUYwFc/JiVDzL6zyOGtU3Nc0TQA=\");\n\n_c = Awards;\nexport default Awards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Awards\");","map":{"version":3,"sources":["C:/Users/SamSung/Desktop/엘리스트랙/1차프로젝트/testgit/front/src/pages/Awards.js"],"names":["React","useEffect","useState","Card","Button","Row","Col","Api","Award","AwardAddForm","Awards","portfolioOwnerId","isEditable","awards","setAwards","isAdding","setIsAdding","get","then","res","data","map","award","id","span"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,QAAuC,iBAAvC;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB;AACA,SAAQC,KAAR,EAAcC,YAAd,QAAiC,8BAAjC;;;AAEA,SAASC,MAAT,OAAkD;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,GAAkC;AAChD;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC,CAFgD,CAGhD;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAM,IAAAA,GAAG,CAACU,GAAJ,CAAQ,WAAR,EAAqBN,gBAArB,EAAuCO,IAAvC,CAA6CC,GAAD,IAASL,SAAS,CAACK,GAAG,CAACC,IAAL,CAA9D;AACD,GAHQ,EAGN,CAACT,gBAAD,CAHM,CAAT;AAKA,sBACE,QAAC,IAAD;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGE,MAAM,CAACQ,GAAP,CAAYC,KAAD,iBACV,QAAC,KAAD;AAEE,QAAA,KAAK,EAAEA,KAFT;AAGE,QAAA,SAAS,EAAER,SAHb;AAIE,QAAA,UAAU,EAAEF;AAJd,SACOU,KAAK,CAACC,EADb;AAAA;AAAA;AAAA;AAAA,cADD,CAFH,EAUGX,UAAU,iBACT,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAAEY,YAAAA,IAAI,EAAE;AAAR,WAAT;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAMR,WAAW,CAAC,IAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAXJ,EAiBGD,QAAQ,iBACP,QAAC,YAAD;AACE,QAAA,gBAAgB,EAAEJ,gBADpB;AAEE,QAAA,SAAS,EAAEG,SAFb;AAGE,QAAA,WAAW,EAAEE;AAHf;AAAA;AAAA;AAAA;AAAA,cAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAxCQN,M;;KAAAA,M;AA0CT,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card, Button, Row, Col } from \"react-bootstrap\";\r\nimport * as Api from \"../api\";\r\nimport {Award,AwardAddForm} from \"../components/features/award\";\r\n\r\nfunction Awards({ portfolioOwnerId, isEditable }) {\r\n  //useState로 awards 상태를 생성함.\r\n  const [awards, setAwards] = useState([]);\r\n  //useState로 isAdding 상태를 생성함.\r\n  const [isAdding, setIsAdding] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // \"awardlist/유저id\"로 GET 요청하고, response의 data로 awards를 세팅함.\r\n    Api.get(\"awardlist\", portfolioOwnerId).then((res) => setAwards(res.data));\r\n  }, [portfolioOwnerId]);\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title>수상이력</Card.Title>\r\n        {awards.map((award) => (\r\n          <Award\r\n            key={award.id}\r\n            award={award}\r\n            setAwards={setAwards}\r\n            isEditable={isEditable}\r\n          />\r\n        ))}\r\n        {isEditable && (\r\n          <Row className=\"mt-3 text-center mb-4\">\r\n            <Col sm={{ span: 20 }}>\r\n              <Button onClick={() => setIsAdding(true)}>+</Button>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n        {isAdding && (\r\n          <AwardAddForm\r\n            portfolioOwnerId={portfolioOwnerId}\r\n            setAwards={setAwards}\r\n            setIsAdding={setIsAdding}\r\n          />\r\n        )}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Awards;\r\n"]},"metadata":{},"sourceType":"module"}