{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SamSung\\\\Desktop\\\\\\uC5D8\\uB9AC\\uC2A4\\uD2B8\\uB799\\\\1\\uCC28\\uD504\\uB85C\\uC81D\\uD2B8\\\\testgit\\\\front\\\\src\\\\components\\\\features\\\\certificate\\\\Certificate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport CertificateCard from \"../../../hooks/CertificateCard\";\nimport CertificateEditForm from \"./CertificateEditForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Certificate(_ref) {\n  _s();\n\n  let {\n    certificate,\n    setCertificates,\n    isEditable\n  } = _ref;\n  //useState로 isEditing 상태를 생성함.\n  const [isEditing, setIsEditing] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isEditing ? /*#__PURE__*/_jsxDEV(CertificateEditForm, {\n      currentAward: certificate,\n      setAwards: setCertificates,\n      setIsEditing: setIsEditing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CertificateCard, {\n      award: certificate,\n      isEditable: isEditable,\n      setIsEditing: setIsEditing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(Certificate, \"N4qUVpaen/rROL8jPu/4huFD8lA=\");\n\n_c = Certificate;\nexport default Certificate;\n\nvar _c;\n\n$RefreshReg$(_c, \"Certificate\");","map":{"version":3,"sources":["C:/Users/SamSung/Desktop/엘리스트랙/1차프로젝트/testgit/front/src/components/features/certificate/Certificate.js"],"names":["React","useState","CertificateCard","CertificateEditForm","Certificate","certificate","setCertificates","isEditable","isEditing","setIsEditing"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;;;AAEA,SAASC,WAAT,OAAmE;AAAA;;AAAA,MAA9C;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,eAAf;AAAgCC,IAAAA;AAAhC,GAA8C;AACjE;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,sBACE;AAAA,cACGO,SAAS,gBACR,QAAC,mBAAD;AACE,MAAA,YAAY,EAAEH,WADhB;AAEE,MAAA,SAAS,EAAEC,eAFb;AAGE,MAAA,YAAY,EAAEG;AAHhB;AAAA;AAAA;AAAA;AAAA,YADQ,gBAOR,QAAC,eAAD;AACE,MAAA,KAAK,EAAEJ,WADT;AAEE,MAAA,UAAU,EAAEE,UAFd;AAGE,MAAA,YAAY,EAAEE;AAHhB;AAAA;AAAA;AAAA;AAAA;AARJ,mBADF;AAiBD;;GApBQL,W;;KAAAA,W;AAsBT,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport CertificateCard from \"../../../hooks/CertificateCard\";\r\nimport CertificateEditForm from \"./CertificateEditForm\";\r\n\r\nfunction Certificate({ certificate, setCertificates, isEditable }) {\r\n  //useState로 isEditing 상태를 생성함.\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  return (\r\n    <>\r\n      {isEditing ? (\r\n        <CertificateEditForm\r\n          currentAward={certificate}\r\n          setAwards={setCertificates}\r\n          setIsEditing={setIsEditing}\r\n        />\r\n      ) : (\r\n        <CertificateCard\r\n          award={certificate}\r\n          isEditable={isEditable}\r\n          setIsEditing={setIsEditing}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Certificate;\r\n"]},"metadata":{},"sourceType":"module"}